/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** 运行模式 */
export const enum RunMode {
  /** 回测 */
  Backtest = 0,
  /** 模拟 */
  Sandbox = 1,
  /** 实盘 */
  Real = 2
}
/** 交易类型 */
export const enum TradeType {
  /** 限价 */
  Limit = 0,
  /** 市价 */
  Market = 1
}
/** 交易方向 */
export const enum TradeSide {
  /** 做多 */
  Long = 0,
  /** 做空 */
  Short = 1
}
/** 交易动作 */
export const enum TradeAction {
  /** 买入 */
  Buy = 0,
  /** 卖出 */
  Sell = 1
}
export interface Callback {
  /** 设置 */
  onSetup?: (ctx:Context) => void
  /** 初始化 */
  onInit?: (ctx:Context) => void
  /** 每日开始 */
  onDayBegin?: (ctx:Context) => void
  /** 每小时开始 */
  onHourBegin?: (ctx:Context) => void
  /** 每分钟开始 */
  onMinuteBegin?: (ctx:Context) => void
  /** Tick */
  onTick?: (ctx:Context) => void
  /** 每分钟结束 */
  onMinuteEnd?: (ctx:Context) => void
  /** 每小时结束 */
  onHourEnd?: (ctx:Context) => void
  /** 每日结束 */
  onDayEnd?: (ctx:Context) => void
  /** 策略停止 */
  onStop?: (ctx:Context) => void
}
/** 运行回测 */
export declare function runBacktest(config: BacktestConfig, callback: Callback): void
/** Decimal */
export declare class Decimal {
  /** 通过字符串创建 */
  static fromString(value: string): Decimal
  /** 通过number创建 */
  static fromNumber(value: number): Decimal
  /** 转为字符串 */
  toString(): string
  /** 转为number */
  toNumber(): number
}
/** K线 */
export declare class Candle {
  constructor()
  /** 标的 */
  get symbol(): string
  /** 开盘时间 */
  get time(): Date
  /** 开盘价 */
  get open(): Decimal
  /** 最高价 */
  get high(): Decimal
  /** 最低价 */
  get low(): Decimal
  /** 收盘价 */
  get close(): Decimal
  /** 成交量 */
  get volume(): Decimal
  /** 报价币成交量 */
  get quoteVolume(): Decimal
  /** 交易笔数 */
  get trades(): number
  /** 吃单方买入的基础币数量 */
  get takerBuyVolume(): Decimal
  /** 吃单方买入的报价币数量 */
  get takerBuyQuoteVolume(): Decimal
}
/** 账户 */
export declare class Account {
  constructor()
  /** 余额 */
  get balance(): Decimal
  /** 可用余额 */
  get available(): Decimal
  /** 未实现盈亏 */
  get upl(): Decimal
}
/** 仓位 */
export declare class Position {
  constructor()
  /** 持仓均价 */
  get price(): Decimal
  /** 持仓数量 */
  get volume(): Decimal
  /** 保证金 */
  get margin(): Decimal
  /** 未实现盈亏 */
  get upl(): Decimal
}
/** 持仓 */
export declare class Positions {
  constructor()
  /** 标的 */
  get symbol(): string
  /** 杠杆倍数 */
  get leverage(): number
  /** 吃单费率 */
  get takerRate(): Decimal
  /** 挂单费率 */
  get makerRate(): Decimal
  /** 做多仓位 */
  get long(): Position
  /** 做空仓位 */
  get short(): Position
}
/** 订单 */
export declare class Order {
  constructor()
  /** 订单号 */
  get id(): string
  /** 标的 */
  get symbol(): string
  /** 交易类型 */
  get type(): TradeType
  /** 交易方向 */
  get side(): TradeSide
  /** 交易动作 */
  get action(): TradeAction
  /**
   * 数量
   * ---
   * 市价交易买入 : 为金额
   * 市价交易卖出 : 为数量
   * 限价交易 : 为数量
   */
  get volume(): Decimal
  /**
   * 价格
   * ---
   * 市价交易 : 为0
   * 限价交易 : 为价格
   */
  get price(): Decimal
  /** 占用保证金 */
  get margin(): Decimal
  /** 下单时间 */
  get time(): Date
  /** 成交均价 */
  get dealPrice(): Decimal
  /** 成交数量 */
  get dealVolume(): Decimal
  /** 成交手续费 */
  get dealFee(): Decimal
}
/** 回测配置 */
export declare class BacktestConfig {
  constructor()
  /** 设置开始时间 */
  begin(this: this, begin: string): this
  /** 设置结束时间 */
  end(this: this, end: string): this
  /** 设置结束时间 */
  balance(this: this, balance: Decimal): this
}
/** 上下文 */
export declare class Context {
  constructor()
  /** 设置基准 */
  setBenchmark(symbol: string): void
  /** 设置交易对 */
  setPair(symbol: string, takerRate: Decimal, makerRate: Decimal): void
  /** 限价买入 */
  limitBuy(symbol: string, side: TradeSide, price: Decimal, volume: Decimal): void
  /** 市价买入 */
  marketBuy(symbol: string, side: TradeSide, quoteVolume: Decimal): void
  /** 限价卖出 */
  limitSell(symbol: string, side: TradeSide, price: Decimal, volume: Decimal): void
  /** 市价卖出 */
  marketSell(symbol: string, side: TradeSide, volume: Decimal): void
  /** 取消订单 */
  cancelOrder(symbol: string, id: string): void
  /** 交易时间 */
  tradeTime(): Date
  /** 指数价 */
  indexPrice(symbol: string): Decimal | null
  /** 标记价 */
  markPrice(symbol: string): Decimal | null
  /** 资金费率 */
  fundingRate(symbol: string): Decimal | null
  /** 最新K线 */
  lastCandle(symbol: string): Candle | null
  /** K线 */
  candles(symbol: string): Array<Candle> | null
  /** 账户 */
  account(): Account
  /** 持仓 */
  position(symbol: string): Positions | null
  /** 基准 */
  benchmark(): string
  /** 订单 */
  order(symbol: string, id: string): Order | null
  /** 日志 调试 */
  debug(msg: string): void
  /** 日志 信息 */
  info(msg: string): void
  /** 日志 警告 */
  warn(msg: string): void
  /** 日志 错误 */
  error(msg: string): void
  /** 停止运行 */
  stop(): void
}
